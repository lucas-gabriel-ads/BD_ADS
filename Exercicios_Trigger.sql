CREATE TABLE ALUNO(
MATRICULA INT NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL);

CREATE FUNCTION NOT_A() 
RETURNS TRIGGER AS $$
BEGIN
	IF NEW.NOME ILIKE 'A%' THEN
		RAISE EXCEPTION 'SEM ALUNOS COM "A" POR AQUI!!';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER T_NOT_A BEFORE INSERT ON ALUNO FOR EACH ROW
EXECUTE PROCEDURE NOT_A();

INSERT INTO ALUNO VALUES (1, 'ALINE');
INSERT INTO ALUNO VALUES (1, 'PAULO');

SELECT * FROM ALUNO;

====================================================================================================================
CREATE TABLE FUNCIONARIO(
COD INT NOT NULL PRIMARY KEY,
NOME VARCHAR(50),
SALARIO INT,
DT_ULT_ATT DATE, 
USER_ATT VARCHAR(50));

CREATE FUNCTION N_NULL() 
RETURNS TRIGGER AS $$
BEGIN
	IF (NEW.NOME IS NULL OR NEW.SALARIO IS NULL OR NEW.SALARIO<0) THEN
		RAISE EXCEPTION 'SALARIO NAO PODE SER NULO NEM < 0 E NOME NAO PODE SER NULO!';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER T_NOT_NULL BEFORE INSERT OR UPDATE ON FUNCIONARIO FOR EACH ROW
EXECUTE PROCEDURE N_NULL();

INSERT INTO FUNCIONARIO VALUES (1, 'LUCAS', -100);
INSERT INTO FUNCIONARIO VALUES (1, NULL, 100);
INSERT INTO FUNCIONARIO VALUES (1, 'LUCAS', 100);
UPDATE FUNCIONARIO
SET SALARIO = -100 WHERE COD=1;

CREATE FUNCTION AUDIT_F()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE FUNCIONARIO
	SET DT_ULT_ATT = CURRENT_DATE, USER_ATT = CURRENT_USER
	WHERE COD=NEW.COD;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER AUD_FUNC AFTER INSERT ON FUNCIONARIO FOR EACH ROW
EXECUTE PROCEDURE AUDIT_F();

SELECT * FROM FUNCIONARIO;

====================================================================================================================
CREATE TABLE EMPREGADO(
NOME VARCHAR(50) NOT NULL,
SALARIO INT NOT NULL);

CREATE TABLE EMPREGADO_AUDITORIA(
OPERACAO CHAR(1) NOT NULL,
USUARIO VARCHAR(20) NOT NULL,
DT DATE NOT NULL,
NOME VARCHAR(50) NOT NULL,
SALARIO INT);

CREATE TRIGGER AUD AFTER INSERT OR DELETE OR UPDATE ON EMPREGADO FOR EACH ROW
EXECUTE PROCEDURE AUDITORIA();

CREATE FUNCTION AUDITORIA()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES ('I', CURRENT_USER, CURRENT_DATE, NEW.NOME, NEW.SALARIO);
	ELSEIF (TG_OP = 'UPDATE') THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES ('U', CURRENT_USER, CURRENT_DATE, NEW.NOME, NEW.SALARIO);
	ELSEIF (TG_OP = 'DELETE') THEN
		INSERT INTO EMPREGADO_AUDITORIA VALUES ('D', CURRENT_USER, CURRENT_DATE, OLD.NOME, OLD.SALARIO);
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

DROP FUNCTION AUDITORIA CASCADE;

INSERT INTO EMPREGADO VALUES ('LUCAS', 100);
UPDATE EMPREGADO
SET SALARIO = 200
WHERE NOME = 'LUCAS';
DELETE FROM EMPREGADO WHERE NOME = 'LUCAS';

SELECT * FROM EMPREGADO_AUDITORIA;

====================================================================================================================

CREATE TABLE EMPREGADO2(
COD SERIAL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
SALARIO INT NOT NULL);

CREATE TABLE EMPREGADO2_AUDIT(
USUARIO VARCHAR(20),
DT DATE,
COD INT,
COLUNA TEXT,
OLD_VALUE TEXT,
NEW_VALUE TEXT);

CREATE TRIGGER AUD2 AFTER INSERT OR DELETE OR UPDATE ON EMPREGADO2 FOR EACH ROW
EXECUTE PROCEDURE AUDITORIA2();

CREATE FUNCTION AUDITORIA2()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'UPDATE' AND OLD.COD != NEW.COD)
		RAISE EXCEPTION 'NUM MEXA NA CHAVE PRIMARIA NÃƒO!'
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;





